@includeNamed{'php-methods.templ'}
<?php \n
namespace @{type.raw.translatePackageName("php").replace(".", "\\")};\n
@code{
  /*clojure does not allow different functions with the same name, thus combine the functions with the same name first
  use their name as map key, methods as value list*/
  import java.util.TreeMap;
  import java.util.HashMap;
  import java.util.TreeSet;
  import java.util.ArrayList;
  /*using tree map & set here only because we need to keep the order in source files*/
  var methodsMap = new TreeMap();
  var paramsMap = new HashMap();
  var importClassSet = new TreeSet();
  foreach (method : methods) {
    if(methodsMap[method.name] == null){
      methodsMap[method.name] = [method];
      var params = new ArrayList();
      for(param:method.params){
        params.add(param.name);
      }
      paramsMap[method.name +"-"+params.size()] = params;
    }else{
      /*Can't have 2 overloads with same arity, the method with same name and params numbers will be combined
        e.g. (req [uri] ...)& (req [options] ...) -> (req [uri-or-options] ...)*/
      var thereIsAnExistingMethodWithSameParameterNumber = false;

      if(paramsMap[method.name+"-"+method.params.size()] != null){
        thereIsAnExistingMethodWithSameParameterNumber = true;

        var list = new ArrayList();

        var paramNames = paramsMap[method.name+"-"+method.params.size()];
        var params = method.params;
        /*combine parameters' name e.g. option-or-request-uri*/
        for(int j=0;j<params.size();j++){
          if(!paramNames.get(j).contains(params.get(j).name)){
            list.add(params.get(j).name + "-or-"+ paramNames.get(j));
          }else{
            list.add(paramNames.get(j));
          }
        }

        paramsMap[method.name+"-"+method.params.size()] = list;
      }

      if(!thereIsAnExistingMethodWithSameParameterNumber){
        methodsMap[method.name].add(method);
        var params = new ArrayList();
        for(param:method.params){
          params.add(param.name);
        }
        paramsMap[method.name+"-"+params.size()] = params;
      }
    }
    /*for import statements*/
    foreach(param:method.params){
        if(param.type.kind == CLASS_DATA_OBJECT) {
            importClassSet.add(wrapJavaImport2PhpUse(translateClassName(param.type)))
        }
        /*
      if(param.type.getName().startsWith("io.vertx.")||param.type.getName().startsWith("java.util.")){
        importClassSet.add(param.type.raw.name)
      }*/
    }
  }
  /*import corresponding java class*/
  /*importClassSet.add(wrapJavaImport2PhpUse(translateClassName(type)));*/
}

@foreach{importClass:importClassSet}
use @{importClass};\n
@end{}

class @{type.simpleName}\n
{\n
    @if{concrete}
    \n
    public function __construct($memory) \n
    {\n
    \n
    }\n
    @end{}
//@{methods.size()}\n
    @foreach{method:methods}
        \n
        public function ${method.name}() \n
        {\n
            \n

        }\n

    @end{}
\n
}\n
