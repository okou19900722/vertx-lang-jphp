@comment{"Generate a call to a Java API method"}
@comment{"===================================="}

@declare{'genMethodCall'}
@if{static}J@{ifaceSimpleName}@else{}j_@{ifaceName}@end{}.@{method.name}(
	@code{pcnt=0;}
	@foreach{param: method.params}
		@code{argName='__args[' + (pcnt++) + ']';}
		@includeNamed{'convParam'}
	@end{", "})
@end{}

@comment{"Generate the code that converts a Java return to the corresponding JavaScript value"}
@comment{"This is also used for converting values returned from Java API via handlers"}
@comment{"==================================================================================="}

@declare{'convReturn'}
	@if{returnType.kind == CLASS_LIST}
		@code{elementType=returnType.args[0]}
		@if{elementType.kind.json}
utils.convReturnListSetJson(@includeNamed{templ})
		@else{elementType.kind == CLASS_DATA_OBJECT}
utils.convReturnListSetDataObject(@includeNamed{templ})
		@else{elementType.kind == CLASS_ENUM}
utils.convReturnListSetEnum(@includeNamed{templ})
		@else{elementType.kind == CLASS_API}
utils.convReturnListSetVertxGen(@includeNamed{templ}, @{elementType.raw.simpleName})
		@else{elementType.name == 'java.lang.Long'}
utils.convReturnListSetLong(@includeNamed{templ})
		@else{}
@includeNamed{templ}
		@end{}
	@else{returnType.kind == CLASS_SET}
		@code{elementType=returnType.args[0]}
		@if{elementType.kind.json}
utils.convReturnListSetJson(@includeNamed{templ})
		@else{elementType.kind == CLASS_DATA_OBJECT}
utils.convReturnListSetDataObject(@includeNamed{templ})
		@else{elementType.kind == CLASS_ENUM}
utils.convReturnListSetEnum(@includeNamed{templ})
		@else{elementType.kind == CLASS_API}
utils.convReturnListSetVertxGen(@includeNamed{templ}, @{elementType.raw.simpleName})
		@else{elementType.name == 'java.lang.Long'}
utils.convReturnListSetLong(@includeNamed{templ})
		@else{}
utils.convReturnSet(@includeNamed{templ})
		@end{}
	@else{returnType.kind == CLASS_MAP}
utils.convReturnMap(@includeNamed{templ})
	@else{returnType.kind.json}
utils.convReturnJson(@includeNamed{templ})
	@else{returnType.kind.basic}
		@if{returnType.name == 'java.lang.Long'}
utils.convReturnLong(@includeNamed{templ})
		@else{}
@includeNamed{templ}
		@end{}
	@else{returnType.kind == CLASS_API}
utils.convReturnVertxGen(@{returnType.raw.simpleName}, @includeNamed{templ}
		@if{returnType.parameterized}
			@foreach{arg:returnType.args}
				@if{arg.kind == CLASS_API}
					, @{arg.simpleName}._jtype
				@else{arg.kind == CLASS_ENUM}
					, utils.enum_jtype(@{arg.name})
				@else{arg.kind == CLASS_OBJECT}
					@code{classTypeParam=method.resolveClassTypeParam(arg)}
					@if{classTypeParam != null}
						, utils.get_jtype(__args[@{classTypeParam.index}])
					@else{}
						, undefined
					@end{}
				@else{}
					, undefined
				@end{}
			@end{}
		@end{}
)
	@else{returnType.kind == CLASS_ENUM}
utils.convReturnEnum(@includeNamed{templ})
	@else{returnType.kind == CLASS_DATA_OBJECT}
utils.convReturnDataObject(@includeNamed{templ})
	@else{returnType.kind == CLASS_THROWABLE}
utils.convReturnThrowable(@includeNamed{templ})
	@else{returnType.kind == CLASS_HANDLER}
		@if{returnType.args[0].kind == CLASS_ASYNC_RESULT}
utils.convReturnHandlerAsyncResult(@includeNamed{templ}, function(result) { return @includeNamed{'convParam';overloaded=false;param=new io.vertx.codegen.ParamInfo(0, "result", null, returnType.args[0].args[0])}; })
		@else{}
utils.convReturnHandler(@includeNamed{templ}, function(result) { return @includeNamed{'convParam';overloaded=false;param=new io.vertx.codegen.ParamInfo(0, "result", null, returnType.args[0])}; })
		@end{}
	@else{returnType.variable && method != null  && (classTypeParam = method.resolveClassTypeParam(returnType)) != null}
utils.get_jtype(__args[@{classTypeParam.index}]).wrap(@includeNamed{templ})
	@else{}
	@comment{'This will probably happen if the return type is generic'}
		@code{wrapper='utils.convReturnTypeUnknown'}
		@foreach{param: type.params}
			@if{param.name == returnType.name}
				@code{wrapper='j_' + param.name + '.wrap'}
			@end{}
		@end{}
@{wrapper}(@includeNamed{templ})
	@end{}
@end{}


@declare{'genMethodAdapter'}
				@if{!method.returnType.name.equals("void")}
					@if{method.fluent}
@{ind}    @includeNamed{'genMethodCall'};\n
						@if{static}
@{ind}    return @{ifaceSimpleName};\n
						@else{}
@{ind}    return that;\n
						@end{}
					@else{method.cacheReturn}
@{ind}    if (that.cached@{method.name} == null) {\n
@{ind}      that.cached@{method.name} = @includeNamed{'convReturn'; templ='genMethodCall'; returnType=method.returnType};\n
@{ind}    }\n
@{ind}    return that.cached@{method.name};\n
					@else{}
@{ind}    return @includeNamed{'convReturn'; templ='genMethodCall'; returnType=method.returnType};\n
					@end{}
				@else{}
@{ind}    @includeNamed{'genMethodCall'};\n
				@end{}
@end{}

@includeNamed{"common.templ"}

@comment{"This is where the generation starts"}
@comment{"==================================="}

/*\n
 * Copyright 2014 Red Hat, Inc.\n
 *\n
 * Red Hat licenses this file to you under the Apache License, version 2.0\n
 * (the "License"); you may not use this file except in compliance with the\n
 * License.  You may obtain a copy of the License at:\n
 *\n
 * http://www.apache.org/licenses/LICENSE-2.0\n
 *\n
 * Unless required by applicable law or agreed to in writing, software\n
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT\n
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n
 * License for the specific language governing permissions and limitations\n
 * under the License.\n
 */\n\n

@comment{"Generate the requires"}

package @{type.raw.translatePackageName("php")};\n

import io.vertx.lang.php.util.Wrapper;\n
	@foreach{referencedType : referencedTypes}
import @{referencedType.translateName("php")};\n
	@end{}
\n

@code{ifaceName = helper.decapitaliseFirstLetter(ifaceSimpleName)}
@comment{"The main comment"}

/**\n
@if{ifaceComment != null}
@{helper.removeTags(ifaceComment)}\n
@end{}
 * @class\n
 */\n

@comment{"The constructor"}
@Name("@{ifaceSimpleName}")\n
@Namespace("@{type.raw.translatePackageName("php").replace(".", "\\\\")}")\n
public class @{ifaceSimpleName} extends BaseWrapper<@{ifaceSimpleName}>{\n

@comment{"Apply any supertypes"}

@foreach{superType: superTypes}
  @{superType.raw.simpleName}.call(this, j_val@if{superType.parameterized && superType.raw.concrete}
	@foreach{arg:superType.args}
		@if{arg.kind == CLASS_API}
, @{arg.simpleName}._jtype
		@else{arg.variable}
, j_@{arg.name}
		@else{}
, undefined
		@end{}
	@end{}
@end{});\n
@end{}
\n

@comment{"Now iterate through each unique method"}

@foreach{methodName:methodsByName.keySet()}

@comment{"Call out to actually generate the method, we only consider non static methods here"}
@includeNamed{'genMethod';static=false;ind="  ";methodFilter=null}

@end{}

@comment{"Each object has a _jdel function which gives access to the underlying Java object"}

  // A reference to the underlying Java delegate\n
  // NOTE! This is an internal API and must not be used in user code.\n
  // If you rely on this property your code is likely to break if we change it / remove it without warning.\n
  this._jdel = j_@{ifaceName};\n
};\n
\n

@{ifaceSimpleName}._jclass = utils.getJavaClass("@{type.raw.name}");\n

@{ifaceSimpleName}._jtype = {\n
  accept: function(obj) {\n
    return @{ifaceSimpleName}._jclass.isInstance(obj._jdel);\n
  },\n
  wrap: function(jdel) {\n
		@comment{'A bit of jiggery pokery to create the object given a reference to the constructor function'}
    var obj = Object.create(@{ifaceSimpleName}.prototype, {});\n
    @{ifaceSimpleName}.apply(obj, arguments);\n
    return obj;\n
  },\n
  unwrap: function(obj) {\n
    return obj._jdel;\n
  }\n
};\n


@{ifaceSimpleName}._create = function(jdel) {\n
		@comment{'A bit of jiggery pokery to create the object given a reference to the constructor function'}
  var obj = Object.create(@{ifaceSimpleName}.prototype, {});\n
  @{ifaceSimpleName}.apply(obj, arguments);\n
  return obj;\n
}\n

@comment{"Iterate through the methods again, this time only considering the static ones"}

@foreach{methodName:methodsByName.keySet()}

@comment{"Call out to generate the static method"}
@includeNamed{'genMethod';static=true;ind="";methodFilter=null}

@end{}

@comment{'We export the Constructor function'}
module.exports = @{ifaceSimpleName};
