@code{
    import java.util.TreeMap;
    import java.util.HashMap;
    import java.util.TreeSet;

    def addImport(addType){
        if((addType.kind == CLASS_DATA_OBJECT || addType.kind == CLASS_API)) {
            if(addType.raw.packageName != type.raw.packageName) {
                importClassSet.add(translateClassName(addType));
            }
        } else if(addType.kind != CLASS_PRIMITIVE && !addType.void && addType.kind != CLASS_OBJECT){
            /*
            if(addType.kind == CLASS_HANDLER) {
                foreach(argType : addType.args) {
                    addImport(argType);
                }
            }*/
            if(addType.kind == CLASS_ASYNC_RESULT){
                importClassSet.add("io.vertx.lang.php.wrapper.AsyncResult");
            }else if(addType.kind == CLASS_THROWABLE){
                importClassSet.add("io.vertx.lang.php.wrapper.JavaThrowable");
            } else if(addType.kind == CLASS_HANDLER || addType.kind == CLASS_FUNCTION) {
                importClassSet.add("php.runtime.lang.Closure");
            } else {
                importClassSet.add(addType.raw.packageName + "." + addType.raw.simpleName);
            }
        }
        if(addType.isParameterized) {
            foreach(arg : addType.args) {
                addImport(arg);
            }
        }
    }

    var importClassSet = new TreeSet();

    importClassSet.add("php.runtime.env.Environment");
    importClassSet.add("php.runtime.reflection.ClassEntity");
    importClassSet.add("php.runtime.lang.BaseWrapper");
    importClassSet.add("php.runtime.annotation.Reflection.Name");
    importClassSet.add("php.runtime.annotation.Reflection.Namespace");
    importClassSet.add("php.runtime.annotation.Reflection.Signature");
    importClassSet.add("php.runtime.lang.IObject");
    importClassSet.add("java.util.stream.Collectors");
    importClassSet.add("php.runtime.Memory");
    if(type.name == "io.vertx.core.Future") {
        importClassSet.add("php.runtime.memory.support.MemoryOperation");
    }

    var methodsMap = new TreeMap();
    var paramsMap = new HashMap();
    var sameParamSizeMethod = new HashMap();
    foreach(method : methods){
        var methodName = method.name;
        var methodParams = method.params;
        var paramSize = methodParams.size();
        var paramKey = method.name + "-" + paramSize;

        if(paramsMap[paramKey] != null) {
            sameParamSizeMethod[paramKey].add(method);
            var srcParams = paramsMap[paramKey];
            for(int i  = 0; i < paramSize; i++) {
                var curParam = methodParams.get(i);
                var sameType = false;
                var curSrcParams = srcParams.get(i);
                for(int j = 0; j < curSrcParams.size(); j++) {
                    var param = curSrcParams.get(j);
                    if(curParam.type.name == param.type.name) {
                        sameType = true;
                    } else {
                        addImport(curParam.type);
                        importClassSet.add("php.runtime.Memory");
                    }
                }
                if(!sameType) {
                	curSrcParams.add(curParam);
                }
            }
        } else {
            var ms = methodsMap[methodName];
            if (ms == null) {
                methodsMap[methodName] = [method];
            } else {
                ms.add(method);
            }
            var params = [];
            for(param : methodParams) {
                params.add([param]);
                addImport(param.type);
            }
            paramsMap[paramKey] = params;
            sameParamSizeMethod[paramKey] = [method];
        }
        /*System.err.println(method.returnType.name);*/
        addImport(method.returnType);
        if (method.returnType.name.startsWith("io.vertx.core.Handler")) {
            importClassSet.add("io.vertx.lang.php.wrapper.Handler");
        }
    }
    var classTypeParams = parseTypeParams(typeParams, false);
    var wrapperName = type.name + classTypeParams;
    var className = type.simpleName;
    var classNameWithTypeParams = type.simpleName + classTypeParams;
}