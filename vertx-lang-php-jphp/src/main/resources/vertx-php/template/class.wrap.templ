@code{var lang = "java";}
@includeNamed{'commons.templ';}

package @{type.raw.translatePackageName("php")};\n
\n
import php.runtime.annotation.Reflection.Name;\n
import php.runtime.annotation.Reflection.Namespace;\n
import php.runtime.annotation.Reflection.Signature;\n
import php.runtime.Memory;\n
import php.runtime.lang.BaseWrapper;\n
import php.runtime.env.Environment;\n
\n

@declare{'methodBody'}
        @if{method.returnType.name != "void" && !method.isFluent}
return
@end{}
@if{isStatic}
@{wrapperClassType}
@else{}
this.getWrappedObject()
@end{}
.@{method.name}(
@code{
    var first = true;
}
@foreach{param : method.params}
@code{
    var paramName = methodSize == 1? param.name : param.name + "$$$";
    var paramKind = param.type.kind;
}
@if{!first}, @else{}@code{first = false}@end{}
@if{}
@{paramName}
@end{}
@end{}
);\n
@end{}

@foreach{importClass : importClassSet}
import @{importClass};\n
@end{}

@code{
    var wrapperClassType = type.raw.packageName + "." + type.raw.simpleName;
    var wrapperType = wrapperClassType;
}
@Name("@{className}")\n
@Namespace("@{namespace}")\n
public class @{className} extends BaseWrapper<@{wrapperType}>{\n
\n
    public @{className}(Environment env, @{wrapperType} wrappedObject) {\n
        super(env, wrappedObject);\n
    }\n

@foreach{methodName:methodsMap.keySet()}
@foreach{method:methodsMap[methodName]}
@code{
    var paramSize = method.params.size();
    var paramKey = methodName + "-" + paramSize;
    var methods = sameParamSizeMethod[paramKey];
    var methodSize = methods.size();
    var isStatic = method.isStaticMethod;
    var returnTypes = getReturnTypes(method);
    var returnTypeName = returnTypes.size() == 1 ? wrapSimpleType1(returnTypes.get(0), true) : "Memory";
}
\n
    /**\n
@foreach{m:methods}
     * @{wrapSimpleType(m.returnType)} (@code{var first = true;}@foreach{param:m.params}@if{!first}, @else{}@code{first = false;}@end{}@{wrapSimpleType(param.type)} @{param.name}@end{})\n
@end{}
     * methodSize : @{methodSize}\n
     */\n
    @Signature\n
    public @if{isStatic}static @end{}@{returnTypeName} @{methodName}(@{getParamInfos(method)}){\n
@if{methods.size() == 1}
@includeNamed{"methodBody"}
@else{}
        return null;\n
@end{}
@if{method.isFluent}
        //return this;\n
@end{}
    }\n
@end{}
@end{}
\n
}\n