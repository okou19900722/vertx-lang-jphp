@code{var lang = "java";}
@includeNamed{'commons.templ';}

package @{type.raw.translatePackageName("php")};\n
\n
import php.runtime.annotation.Reflection.Name;\n
import php.runtime.annotation.Reflection.Namespace;\n
import php.runtime.annotation.Reflection.Signature;\n
import php.runtime.Memory;\n
import php.runtime.lang.BaseWrapper;\n
import php.runtime.env.Environment;\n
\n

@declare{'methodBody'}
        return null;\n
@end{}

@foreach{importClass : importClassSet}
import @{importClass};\n
@end{}

@code{
    var wrapperType = type.raw.packageName + "." + type.raw.simpleName;
}
@Name("@{className}")\n
@Namespace("@{namespace}")\n
public class @{className} extends BaseWrapper<@{wrapperType}>{\n
\n
    public @{className}(Environment env, @{wrapperType} wrappedObject) {\n
        super(env, wrappedObject);\n
    }\n

@foreach{methodName:methodsMap.keySet()}
@foreach{method:methodsMap[methodName]}
@code{
    var paramSize = method.params.size();
    var paramKey = methodName + "-" + paramSize;
    var methods = sameParamSizeMethod[paramKey];
    var isStatic = method.isStaticMethod;
}
\n
    /**\n
@foreach{m:methods}
     * (@code{var first = true;}@foreach{param:m.params}@if{!first}, @else{}@code{first = false;}@end{}@{wrapSimpleType(param.type)} @{param.name}@end{})\n
@end{}
     */\n
    @Signature\n
    public @if{isStatic}static @end{}@{getReturnType(method)} @{methodName}(@{getParamInfos(method)}){\n
@includeNamed{'methodBody';method:method}
    }\n
@end{}
@end{}
\n
}\n