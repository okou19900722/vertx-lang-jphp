package io.vertx.php.ext.sql;

import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.sql.FetchDirection;
import io.vertx.ext.sql.ResultSetConcurrency;
import io.vertx.ext.sql.ResultSetType;
import io.vertx.ext.sql.TransactionIsolation;
import io.vertx.lang.jphp.wrapper.DataObjectWrapper;
import org.develnext.jphp.zend.ext.json.JsonFunctions;
import php.runtime.Memory;
import php.runtime.memory.ObjectMemory;
import php.runtime.env.Environment;
import php.runtime.reflection.ClassEntity;
import php.runtime.annotation.Reflection.*;

@SuppressWarnings("unused")
@Name("SQLOptions")
@Namespace("io\\vertx\\php\\ext\\sql")
//false
public  class SQLOptions extends DataObjectWrapper<io.vertx.ext.sql.SQLOptions> { 
    public SQLOptions(Environment env, io.vertx.ext.sql.SQLOptions wrappedObject) {
        super(env, wrappedObject);
    }

    public SQLOptions(Environment env, ClassEntity clazz) {
        super(env, clazz);
    }

    @Signature
    public Memory __construct(){
        this.__wrappedObject = new io.vertx.ext.sql.SQLOptions();
        return Memory.NULL;    }

    @Signature
    public Memory __construct(Memory memory) {
        this.__wrappedObject = new io.vertx.ext.sql.SQLOptions(new JsonObject(JsonFunctions.json_encode(memory)));
        return Memory.NULL;
    }

    @Signature
    public boolean isAutoGeneratedKeys(){ 
        return this.getWrappedObject().isAutoGeneratedKeys();
    }

    @Signature
    public SQLOptions setAutoGeneratedKeys(boolean autoGeneratedKeys){ 
        this.getWrappedObject().setAutoGeneratedKeys(autoGeneratedKeys);
        return this;
    }

    @Signature
    public JsonArray getAutoGeneratedKeysIndexes(){ 
        return this.getWrappedObject().getAutoGeneratedKeysIndexes();
    }

    @Signature
    public SQLOptions setAutoGeneratedKeysIndexes(JsonArray autoGeneratedKeysIndexes){ 
        this.getWrappedObject().setAutoGeneratedKeysIndexes(autoGeneratedKeysIndexes);
        return this;
    }

    @Signature
    public String getCatalog(){ 
        return this.getWrappedObject().getCatalog();
    }

    @Signature
    public SQLOptions setCatalog(String catalog){ 
        this.getWrappedObject().setCatalog(catalog);
        return this;
    }

    @Signature
    public FetchDirection getFetchDirection(){ 
        return this.getWrappedObject().getFetchDirection();
    }

    @Signature
    public SQLOptions setFetchDirection(FetchDirection fetchDirection){ 
        this.getWrappedObject().setFetchDirection(fetchDirection);
        return this;
    }

    @Signature
    public int getFetchSize(){ 
        return this.getWrappedObject().getFetchSize();
    }

    @Signature
    public SQLOptions setFetchSize(int fetchSize){ 
        this.getWrappedObject().setFetchSize(fetchSize);
        return this;
    }

    @Signature
    public int getQueryTimeout(){ 
        return this.getWrappedObject().getQueryTimeout();
    }

    @Signature
    public SQLOptions setQueryTimeout(int queryTimeout){ 
        this.getWrappedObject().setQueryTimeout(queryTimeout);
        return this;
    }

    @Signature
    public boolean isReadOnly(){ 
        return this.getWrappedObject().isReadOnly();
    }

    @Signature
    public SQLOptions setReadOnly(boolean readOnly){ 
        this.getWrappedObject().setReadOnly(readOnly);
        return this;
    }

    @Signature
    public ResultSetConcurrency getResultSetConcurrency(){ 
        return this.getWrappedObject().getResultSetConcurrency();
    }

    @Signature
    public SQLOptions setResultSetConcurrency(ResultSetConcurrency resultSetConcurrency){ 
        this.getWrappedObject().setResultSetConcurrency(resultSetConcurrency);
        return this;
    }

    @Signature
    public ResultSetType getResultSetType(){ 
        return this.getWrappedObject().getResultSetType();
    }

    @Signature
    public SQLOptions setResultSetType(ResultSetType resultSetType){ 
        this.getWrappedObject().setResultSetType(resultSetType);
        return this;
    }

    @Signature
    public String getSchema(){ 
        return this.getWrappedObject().getSchema();
    }

    @Signature
    public SQLOptions setSchema(String schema){ 
        this.getWrappedObject().setSchema(schema);
        return this;
    }

    @Signature
    public TransactionIsolation getTransactionIsolation(){ 
        return this.getWrappedObject().getTransactionIsolation();
    }

    @Signature
    public SQLOptions setTransactionIsolation(TransactionIsolation transactionIsolation){ 
        this.getWrappedObject().setTransactionIsolation(transactionIsolation);
        return this;
    }
}
