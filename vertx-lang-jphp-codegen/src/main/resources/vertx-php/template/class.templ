@code{import java.util.HashSet;var lang = "php";}
@includeNamed{'commons.templ';}
<?php \n
namespace @{namespace};\n

@foreach{importClass : importClassSet}
use @{importClass.replace(".", "\\")};\n
@end{}

class @{className}\n
{\n
	\n
    private function __construct()\n
    {\n
		\n
    }\n

@foreach{methodName : methodsMap.keySet()}
    /**\n
	@code{
		var methodNum = 0;
		var maxParamSize = 0;
		var minParamSize = 999;
		var isStatic = false;
	}
	@foreach{m:methodsMap[methodName]}
		@code{
			var paramSize = m.params.size();
			var paramKey = methodName + "-" + paramSize;
			var methods = sameParamSizeMethod[paramKey];
			if(paramSize > maxParamSize) {
				maxParamSize = paramSize;
			}
			if(paramSize < minParamSize) {
				minParamSize = paramSize;
			}
		}
		@foreach{method : methods}
			@code{
				methodNum += 1;
				if(!isStatic && method.isStaticMethod) {
					isStatic = true;
				}
			}
		     * (@code{var first = true;}@foreach{param:method.params}@if{!first}, @else{}@code{first = false;}@end{}@{wrapSimpleType(param.type)} @{param.name}@end{})\n
		@end{}
	@end{}
     * @return @{wrapSimpleType(methods.get(0).returnType)}\n
     */\n
    public @if{isStatic}static @end{}function @{methodName}(@{getParamName(minParamSize, maxParamSize)})\n
    {\n
		@code{
			var returnType = methods.get(0).returnType;
			var returnTypeKind = returnType.kind;
		}
		@if{returnType.name != "void"}
			@if{returnTypeKind == CLASS_PRIMITIVE || returnTypeKind == CLASS_BOXED_PRIMITIVE}
				@code{
					var name = returnTypeKind == CLASS_PRIMITIVE ? returnType.boxed.simpleName : returnType.simpleName;
				}
				@if{name == "Byte" || name == "Character" || name == "Short" || name == "Integer" || name == "Long" || name == "Double" || name == "Float"}
			        return 0;\n
				@else{name == "String"}
			        return "";\n
				@else{name == "Boolean"}
			        return false;\n
				@end{}
			@else{}
		        return null;\n
			@end{}
		@end{}
    }\n
@end{}
}\n