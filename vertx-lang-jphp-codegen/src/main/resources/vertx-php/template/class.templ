@includeNamed{"methods.templ"}
<?php\n
\n
namespace @{type.translatePackageName("jphp").replace(".", "\\")};\n
\n
@code{
	import java.util.HashSet;
	import java.util.ArrayList;

	var importClassSet = new HashSet();

	def addImport(typeInfo){
		if(typeInfo.isVariable) {
			return
		}
		var typeKind = typeInfo.kind;
		if(typeKind == CLASS_API || typeKind == CLASS_DATA_OBJECT) {
			if(typeInfo.raw.packageName != ifacePackageName) {
				importClassSet.add(typeInfo.raw.translatePackageName("jphp") + "." + typeInfo.raw.simpleName);
			}
		}
	}

	foreach(methodName : methodsByName.keySet()) {
		var methods = methodsByName[methodName];
		foreach(method : methods) {
			addImport(method.returnType);
			foreach(param : method.params) {
				addImport(param.type);
			}
		}
	}

	def getParamName(min, max){
		var res = '';
		for(int k = 0; k < max; k++) {
			if(res != '') {
				res += ", ";
			}
			res += "$arg" + k;
			if(k >= min) {
				res += " = null";
			}
		}
		return res;
	}
}
@if{importClassSet.size() > 0}
	@foreach{importClass : importClassSet}
		use @{importClass.replace(".", "\\")};\n
	@end{}
@end{}
/**\n
@if{ifaceComment != null}
	@foreach{str : split(helper.removeTags(ifaceComment))}
	 * @{str}\n
	@end{}
@end{}
 */\n
class @{ifaceSimpleName}\n
{\n
    private function __construct()\n
    {\n
\n
    }\n

	@foreach{methodName:methodsByName.keySet()}
		@code{
			var methods = methodsByName[methodName];
			var returnType = null;
			var returnDescription = "";
			var minParamSize = 99;
			var maxParamSize = 0;
			var isStatic = false;
			foreach(method : methods) {
				if(returnType == null) {
					if(method.isFluent) {
						returnType = type;
					} else {
						returnType = method.returnType;
					}
					if(method.returnDescription != null) {
						returnDescription = method.returnDescription.value;
					}
				}
				var methodParamsSize = method.params.size();
				if(methodParamsSize > maxParamSize) {
					maxParamSize = methodParamsSize;
				}
				if(methodParamsSize < minParamSize) {
					minParamSize = methodParamsSize;
				}
				isStatic = method.isStaticMethod;
			}
		}
		\n
	    /**\n
		@code{
			var paramTypes = new ArrayList();
		}
		@foreach{method:methods}
			@if{method.doc != null}
				@if{method.doc.firstSentence != null}
					@foreach{str : split(method.doc.firstSentence.value)}
				     * @{str} \n
					@end{}
				     * \n
				@end{}
				@if{method.doc.body != null}
					@foreach{str : split(method.doc.body.value)}
				     * @{str} \n
					@end{}
				     * \n
				@end{}
			@end{}
			@foreach{param : method.params}
			     * $$@{param.name} @{join(genPHPDocType(param.type), "|", "[", "]")} @if{param.description != null}@{param.description.value}@end{} \n
			     * \n
			@end{}
		     * <b>\n
		     * @{methodName}(
				@code{
					var index = 0;
				}
				@foreach{param : method.params}
					@code{
						var params = index < paramTypes.size() ? paramTypes.get(index) : null;
						if(params == null) {
							params = new HashSet();
							paramTypes.add(params);
						}
						var paramType = genPHPDocType(param.type);
						params.addAll(paramType);
					}
					@if{index > 0}
						,
					@end{}
					@code{
						index += 1;
					}
					$$@{param.name}
				@end{}
			)\n
		     * </b>\n
		     *\n
		@end{}
		@code{
			var paramIndex = 0;
		}
		@foreach{paramType : paramTypes}
		     * @param $$arg@{paramIndex} @{join(paramType, "|", "", "")} \n
			@code{
				paramIndex++;
			}
		@end{}
	     * @return @{join(genPHPDocType(returnType), "|", "", "")} @{returnDescription}\n
	     */\n
	    public
		@if{isStatic}
 			static
		@end{}
 		function @{methodName}(@{getParamName(minParamSize, maxParamSize)})\n
	    {\n
			@if{returnType.name == "void"}
				\n
			@else{}
		        return @{getReturnInfo(returnType)};\n
			@end{}
	    }\n
	@end{}
}

